from src.classes.SoSLocations import SoSLocationsfrom src.classes.SoSPackage import SoSPackagefrom src.classes.SoSPackages import SoSPackagesfrom src.classes.SoSTruck import SoSTruckdef main():    SoSLocations.initialize()    SoSPackages.initialize()    truck_1: SoSTruck = SoSTruck(1)    truck_2: SoSTruck = SoSTruck(2)    truck_3: SoSTruck = SoSTruck(3)    load_truck(truck_1)    load_truck(truck_2)    truck_1.print_cargo()    truck_1.print_destinations()    truck_2.print_cargo()    truck_2.print_destinations()    print(len(SoSPackages.truck_restricted))    print(len(SoSPackages.before_specified_time))def load_truck(truck: SoSTruck):    packages_to_load = []    if len(SoSPackages.truck_restricted) > 0:        filtered = filter(lambda x: x[1] == truck.get_truck_number(), SoSPackages.truck_restricted)        filtered_list = list(filtered)        mapped = map(lambda x: x[0], filtered_list)        mapped_list = list(mapped)        packages_to_load.extend(mapped_list)    if len(SoSPackages.delivered_with) > 0:        mapped = map(map_delivered_with_to_array, SoSPackages.delivered_with)        mapped_list = list(mapped)        for group in mapped_list:            packages_to_load.extend(group)    if len(SoSPackages.before_specified_time) > 0:        mapped = map(lambda x: x[0], SoSPackages.before_specified_time)        mapped_list = list(mapped)        packages_to_load.extend(mapped_list)    while not truck.is_full() and len(packages_to_load) > 0:        package: SoSPackage = SoSPackages.packages.get(packages_to_load.pop(0))        if package.get_special_note() and package.get_special_note()[0] in [SoSPackage.SPECIAL_NOTE_TYPE.DELAYED.value, SoSPackage.SPECIAL_NOTE_TYPE.WRONG_ADDRESS.value]:            continue        truck.load(package)        load_more(truck, SoSLocations.packages_to_locations.get(package.get_destination_id()))def load_more(truck: SoSTruck, packages: list):    if len(packages) < 1:        return    while not truck.is_full():        if len(packages) > 0:            package = SoSPackages.packages.get(packages.pop(0))            truck.load(package)        else:            breakdef map_delivered_with_to_array(x):    to_return = [x[0]]    to_return.extend(x[1].split(', '))    return to_returndef filter_test(x, y):    print(x, y)    return xmain()